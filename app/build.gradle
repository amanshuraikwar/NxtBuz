import io.github.amanshuraikwar.nxtbuz.buildSrc.Libs

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: "$project.rootDir/git_version.gradle"
//apply from: '../shared_dependencies.gradle'

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {

    signingConfigs {
        release {
            storeFile file(localProperties['keystore.file.path'])
            storePassword localProperties['keystore.password']
            keyAlias localProperties['keystore.key.alias']
            keyPassword localProperties['keystore.key.password']
        }
    }

    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId names.applicationId
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode gitVersionCode
        versionName gitVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    sourceSets {
        main {
            // Adds exported schema location as app assets.
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
        androidTest {
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    ext {
        APP_NAME_DEBUG = "@string/app_name_debug"
        APP_NAME_RELEASE = "@string/app_name"
        APP_NAME_INTERNAL = "@string/app_name_internal"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".release"
            resValue "string", "google_maps_key", localProperties['google.maps.api.key.release']
            buildConfigField "String", "ltaAccountkey", "\""+localProperties['lta.account.key.release']+"\""
            manifestPlaceholders = [ appName : APP_NAME_RELEASE]
            debuggable false
        }
        internal {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".internal"
            resValue "string", "google_maps_key", localProperties['google.maps.api.key.release']
            buildConfigField "String", "ltaAccountkey", "\""+localProperties['lta.account.key.release']+"\""
            manifestPlaceholders = [ appName : APP_NAME_INTERNAL]
            debuggable true
            matchingFallbacks = ['release']
        }
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "google_maps_key", localProperties['google.maps.api.key.debug']
            buildConfigField "String", "ltaAccountkey", "\""+localProperties['lta.account.key.debug']+"\""
            manifestPlaceholders = [ appName : APP_NAME_DEBUG]
            debuggable true
        }
    }

    // apk file name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File("NxtBuz-" + variant.versionName + "-(" + variant.versionCode + ")-" + variant.buildType.name + ".apk")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
    }
}

dependencies {
    implementation project(':multiitemadapter')
    implementation project(':common')

    // todo: remove after complete migration
    implementation project(':data')

    implementation project(':domain')
    implementation project(':launcher')
    implementation project(':onboarding')
    implementation project(':ltaapi')
    implementation project(':listitem')
    implementation project(':search')

    implementation Libs.Kotlin.stdlib

    implementation Libs.Coroutines.core
    implementation Libs.Coroutines.android

    implementation Libs.Google.material

    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.constraintlayout

    implementation Libs.AndroidX.Navigation.fragment
    implementation Libs.AndroidX.Navigation.ui

    implementation Libs.AndroidX.Room.runtime
    kapt Libs.AndroidX.Room.compiler
    implementation Libs.AndroidX.Room.ktx
    androidTestImplementation Libs.AndroidX.Room.testing

    implementation Libs.AndroidX.Lifecycle.viewmodel
    implementation Libs.AndroidX.Lifecycle.livedata
    implementation Libs.AndroidX.Lifecycle.extensions

    implementation Libs.threeTenAbp

    implementation Libs.Retrofit.retrofit
    implementation Libs.Retrofit.gsonConverter
    implementation Libs.OkHttp.loggingInterceptor

    implementation Libs.Dagger.library
    implementation Libs.Dagger.androidSupport
    kapt Libs.Dagger.compiler
    kapt Libs.Dagger.androidProcessor

    implementation Libs.Google.playServicesMap
    implementation Libs.Google.playServicesLocation

    kapt project(':annotationProcessors')
    compileOnly project(':annotations')

    implementation Libs.Google.analytics
    implementation Libs.Google.crashlytics

    testImplementation Libs.junit
    androidTestImplementation Libs.AndroidX.Test.Ext.junit
    androidTestImplementation Libs.AndroidX.Test.espressoCore

    // flipper
    debugImplementation Libs.Flipper.library
    debugImplementation Libs.Flipper.soloader
    debugImplementation Libs.Flipper.networkPlugin

    // flipper
    internalImplementation Libs.Flipper.library
    internalImplementation Libs.Flipper.soloader
    internalImplementation Libs.Flipper.networkPlugin
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'